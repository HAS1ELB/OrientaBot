#!/usr/bin/env python3
"""
Script pour combiner tous les PDFs d'√©coles en un seul document pour le RAG
"""

import os
import sys
from pathlib import Path
from PyPDF2 import PdfMerger
import logging
from datetime import datetime

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def combine_pdfs(pdf_folder="pdfs", output_folder="data", output_filename="ecoles_maroc_combined.pdf"):
    """
    Combine tous les PDFs pr√©sents dans le dossier pdf_folder en un seul PDF
    
    Args:
        pdf_folder (str): Dossier contenant les PDFs √† combiner
        output_folder (str): Dossier de sortie pour le PDF combin√©
        output_filename (str): Nom du fichier PDF combin√©
    
    Returns:
        bool: True si la combinaison a r√©ussi, False sinon
    """
    
    # Chemins absolus
    script_dir = Path(__file__).parent
    pdf_dir = script_dir / pdf_folder
    output_dir = script_dir / output_folder
    output_path = output_dir / output_filename
    
    # V√©rifier que le dossier des PDFs existe
    if not pdf_dir.exists():
        logger.error(f"Le dossier {pdf_dir} n'existe pas")
        return False
    
    # Cr√©er le dossier de sortie s'il n'existe pas
    output_dir.mkdir(exist_ok=True)
    
    # Trouver tous les fichiers PDF
    pdf_files = list(pdf_dir.glob("*.pdf"))
    
    if not pdf_files:
        logger.warning(f"Aucun fichier PDF trouv√© dans {pdf_dir}")
        return False
    
    logger.info(f"Trouv√© {len(pdf_files)} fichier(s) PDF √† combiner:")
    for pdf_file in sorted(pdf_files):
        logger.info(f"  - {pdf_file.name}")
    
    try:
        # Cr√©er le merger
        merger = PdfMerger()
        
        # Ajouter chaque PDF au merger
        for pdf_file in sorted(pdf_files):
            logger.info(f"Ajout de {pdf_file.name}...")
            
            try:
                merger.append(str(pdf_file))
            except Exception as e:
                logger.error(f"Erreur lors de l'ajout de {pdf_file.name}: {e}")
                continue
        
        # Sauvegarder le PDF combin√©
        logger.info(f"Sauvegarde du PDF combin√©: {output_path}")
        with open(output_path, 'wb') as output_file:
            merger.write(output_file)
        
        merger.close()
        
        # V√©rifier que le fichier a √©t√© cr√©√©
        if output_path.exists():
            file_size = output_path.stat().st_size / 1024  # Taille en KB
            logger.info(f"‚úÖ PDF combin√© cr√©√© avec succ√®s!")
            logger.info(f"   üìÅ Fichier: {output_path}")
            logger.info(f"   üìä Taille: {file_size:.1f} KB")
            logger.info(f"   üìö Sources: {len(pdf_files)} PDF(s)")
            return True
        else:
            logger.error("‚ùå Le fichier de sortie n'a pas √©t√© cr√©√©")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la combinaison des PDFs: {e}")
        return False

def main():
    """Fonction principale"""
    logger.info("üöÄ D√©but de la combinaison des PDFs des √©coles")
    logger.info("=" * 50)
    
    success = combine_pdfs()
    
    logger.info("=" * 50)
    if success:
        logger.info("‚úÖ Combinaison termin√©e avec succ√®s!")
        logger.info("üìÑ Le PDF combin√© est pr√™t pour le syst√®me RAG.")
    else:
        logger.error("‚ùå √âchec de la combinaison des PDFs")
        sys.exit(1)

if __name__ == "__main__":
    main()